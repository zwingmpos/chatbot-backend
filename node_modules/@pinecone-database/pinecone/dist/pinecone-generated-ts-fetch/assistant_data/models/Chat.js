"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Assistant Data Plane API
 * Pinecone Assistant Engine is a context engine to store and retrieve relevant knowledge from millions of documents at scale. This API supports interactions with assistants.
 *
 * The version of the OpenAPI document: 2025-01
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatToJSON = exports.ChatFromJSONTyped = exports.ChatFromJSON = exports.instanceOfChat = exports.ChatModelEnum = void 0;
const runtime_1 = require("../runtime");
const MessageModel_1 = require("./MessageModel");
/**
 * @export
 */
exports.ChatModelEnum = {
    Gpt4o: 'gpt-4o',
    Claude35Sonnet: 'claude-3-5-sonnet'
};
/**
 * Check if a given object implements the Chat interface.
 */
function instanceOfChat(value) {
    let isInstance = true;
    isInstance = isInstance && "messages" in value;
    return isInstance;
}
exports.instanceOfChat = instanceOfChat;
function ChatFromJSON(json) {
    return ChatFromJSONTyped(json, false);
}
exports.ChatFromJSON = ChatFromJSON;
function ChatFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'messages': (json['messages'].map(MessageModel_1.MessageModelFromJSON)),
        'stream': !(0, runtime_1.exists)(json, 'stream') ? undefined : json['stream'],
        'model': !(0, runtime_1.exists)(json, 'model') ? undefined : json['model'],
        'filter': !(0, runtime_1.exists)(json, 'filter') ? undefined : json['filter'],
        'jsonResponse': !(0, runtime_1.exists)(json, 'json_response') ? undefined : json['json_response'],
        'includeHighlights': !(0, runtime_1.exists)(json, 'include_highlights') ? undefined : json['include_highlights'],
    };
}
exports.ChatFromJSONTyped = ChatFromJSONTyped;
function ChatToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'messages': (value.messages.map(MessageModel_1.MessageModelToJSON)),
        'stream': value.stream,
        'model': value.model,
        'filter': value.filter,
        'json_response': value.jsonResponse,
        'include_highlights': value.includeHighlights,
    };
}
exports.ChatToJSON = ChatToJSON;
//# sourceMappingURL=Chat.js.map